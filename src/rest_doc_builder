#!/bin/lua

-- @script create documentation from file with rest api, defined by rest_api_builder
--
-- @see rest_api_builder
--
-- @return json encoded doumentation in standard output
--
-- @usage call the script with one argument: name of lua module from which will be created documentation, for example:
-- ```sh
-- ./rest_doc_builder api/test
-- ```
-- NOTE that if in your script uses some external variables or `require` calls you need add it to `init.lua`, which
-- will set this variables
--
-- @warning loaded module must be without extension! It must be same as module name for `require`
--
local cjson = require("cjson")
pcall(require, "init")

local C_VERSION_HEADER_NAME = "Accept-Version"

local documentation = {}

local rest_doc_builder = {}

local header_builder = {
  name = nil,
  required = nil,
  acceptable_values = nil,
  accept_function = nil,
  error_status = 406,
}

function header_builder.new(header_name)
  return setmetatable({name = header_name}, {__index = header_builder})
end

function header_builder:required(is_required)
  self.required = is_required
  return self
end

function header_builder:accept(values)
  if type(values) == "table" then
    self.acceptable_values = values
  else
    self.acceptable_values = {values}
  end

  return self
end

function header_builder:error_code()
end

function rest_doc_builder.new()
  return setmetatable({output = documentation}, {__index = rest_doc_builder})
end

function rest_doc_builder:header(header_name)
  return header_builder.new(header_name)
end

function rest_doc_builder:set_common_headers(control_headers)
  self.common_headers = control_headers
end

function rest_doc_builder:create_endpoint(api_version,
                                          method,
                                          path_signature,
                                          _,
                                          description,
                                          control_headers)
  if self.output[api_version] == nil then
    self.output[api_version] = {}
  end

  if control_headers == nil then
    control_headers = {}
  end

  table.insert(control_headers, self:header(C_VERSION_HEADER_NAME)
                 :required(true):accept(api_version))

  if self.common_headers then
    for _, header in ipairs(self.common_headers) do
      table.insert(control_headers, header)
    end
  end

  table.insert(self.output[api_version], {
    method = method,
    path_signature = path_signature,
    description = description,
    control_headers = control_headers,
  })
end

function rest_doc_builder:create_endpoint_t(arg_table)
  return self:create_endpoint(arg_table.api_version, arg_table.method,
                              arg_table.path_signature, arg_table.callback,
                              arg_table.description, arg_table.control_headers)
end

function rest_doc_builder:generate_options_endpoints()
end

function rest_doc_builder:handle_request()
end

if package.loaded.ngx == nil then
  package.loaded.ngx = {
    var = {},
    req = {
      get_method = function()
      end,
    },
    unescape_uri = function()
    end,
  }
end

local process = require
_G.require = function(package_name)
  if package_name == "rest_api_builder" then
    return rest_doc_builder
  else
    local loaded = package.loaded[package_name]
    if loaded == nil then
      error(string.format(
              "package: %s - not loaded, add this package to init.lua",
              package_name))
    end
    return loaded
  end
end

local function main()
  local api_file = arg[1]
  if api_file == nil then
    error("you must set name of module for processing as first argument")
  end

  if string.match(api_file, "[.]lua$") then
    -- fix this automaticly
    api_file = string.sub(api_file, 1, -5)
  end

  process(api_file)
  print(cjson.encode(documentation))
end

main()
